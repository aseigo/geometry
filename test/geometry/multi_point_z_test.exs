defmodule Geometry.MultiPointZTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case

  alias Geometry.{MultiPointZ, PointZ}

  doctest Geometry.MultiPointZ, import: true

  @moduletag :multi_point

  describe "to_geo_json/1" do
    test "returns geo-json-term" do
      geo_json =
        MultiPointZ.to_geo_json(
          MultiPointZ.new([
            PointZ.new(-1.1, -2.2, -3.3),
            PointZ.new(1.1, 2.2, 3.3)
          ])
        )

      assert geo_json |> Map.keys() |> Enum.sort() == ["coordinates", "type"]
      assert Map.get(geo_json, "type") == "MultiPoint"

      assert geo_json |> Map.get("coordinates") |> Enum.sort() == [
               [-1.1, -2.2, -3.3],
               [1.1, 2.2, 3.3]
             ]
    end
  end

  describe "from_geo_json!/1" do
    test "returns geo-json-term" do
      geo_json =
        Jason.decode!("""
           {
             "type": "MultiPoint",
             "coordinates": [
               [1.1, 1.2, 1.3],
               [20.1, 20.2, 20.3]
             ]
           }
        """)

      assert MultiPointZ.from_geo_json!(geo_json) ==
               %MultiPointZ{
                 points:
                   MapSet.new([
                     %PointZ{x: 1.1, y: 1.2, z: 1.3},
                     %PointZ{x: 20.1, y: 20.2, z: 20.3}
                   ])
               }
    end

    test "raises an error for an invalid geo_json" do
      message = "type not found"

      assert_raise Geometry.Error, message, fn ->
        MultiPointZ.from_geo_json!(%{})
      end
    end
  end

  describe "to_wkt/2" do
    test "returns WKT for an empty MultiPointZ" do
      assert MultiPointZ.to_wkt(MultiPointZ.new()) ==
               "MultiPoint Z EMPTY"
    end

    test "returns wkt for a MultiPointZ" do
      assert MultiPointZ.to_wkt(
               MultiPointZ.new([
                 PointZ.new(7.1, 8.1, 1.1),
                 PointZ.new(9.2, 5.2, 2.2)
               ])
             ) ==
               "MultiPoint Z (7.1 8.1 1.1, 9.2 5.2 2.2)"
    end

    test "return WKT for a MultiPointZ with SRID" do
      assert MultiPointZ.to_wkt(
               MultiPointZ.new([
                 PointZ.new(7.1, 8.1, 1.1),
                 PointZ.new(9.2, 5.2, 2.2)
               ]),
               srid: 123
             ) ==
               "SRID=123;MultiPoint Z (7.1 8.1 1.1, 9.2 5.2 2.2)"
    end
  end

  describe "from_wkb/1" do
    test "returns a MultiPointZ (xdr)" do
      wkb = """
      00\
      80000004\
      00000003\
      00\
      80000001\
      403E0000000000004024000000000000402E000000000000\
      00\
      80000001\
      404400000000000040440000000000004034000000000000\
      00\
      80000001\
      40340000000000004044000000000000402E000000000000\
      """

      multi_point = %MultiPointZ{
        points:
          MapSet.new([
            %PointZ{x: 30.0, y: 10.0, z: 15.0},
            %PointZ{x: 20.0, y: 40.0, z: 15.0},
            %PointZ{x: 40.0, y: 40.0, z: 20.0}
          ])
      }

      assert MultiPointZ.from_wkb(wkb) == {:ok, multi_point}
    end

    test "returns an empty MultiPointZ (xdr)" do
      wkb = """
      00\
      80000004\
      00000000\
      """

      assert MultiPointZ.from_wkb(wkb) == {:ok, %MultiPointZ{}}
    end

    test "returns an empty MultiPointZ (ndr)" do
      wkb = """
      01\
      04000080\
      00000000\
      """

      assert MultiPointZ.from_wkb(wkb) == {:ok, %MultiPointZ{}}
    end
  end

  describe "from_wkb!/1" do
    test "returns a MultiPointZ (xdr)" do
      wkb = """
      00\
      80000004\
      00000003\
      00\
      80000001\
      403E0000000000004024000000000000402E000000000000\
      00\
      80000001\
      404400000000000040440000000000004034000000000000\
      00\
      80000001\
      40340000000000004044000000000000402E000000000000\
      """

      multi_point = %MultiPointZ{
        points:
          MapSet.new([
            %PointZ{x: 30.0, y: 10.0, z: 15.0},
            %PointZ{x: 20.0, y: 40.0, z: 15.0},
            %PointZ{x: 40.0, y: 40.0, z: 20.0}
          ])
      }

      assert MultiPointZ.from_wkb!(wkb) == multi_point
    end

    test "returns a MultiPointZ with srid (ndr)" do
      wkb = """
      01\
      040000A0\
      0F270000\
      01000000\
      01\
      01000080\
      0000000000003E4000000000000024400000000000002E40\
      """

      multi_point = %MultiPointZ{
        points: MapSet.new([%PointZ{x: 30.0, y: 10.0, z: 15.0}])
      }

      assert MultiPointZ.from_wkb!(wkb) == {multi_point, 9999}
    end

    test "raises an error for an invalid WKB" do
      message = "expected endian flag '00' or '01', got 'F0', at position 0"

      assert_raise Geometry.Error, message, fn ->
        MultiPointZ.from_wkb!("F00")
      end
    end
  end

  describe "to_wkb/1" do
    test "returns WKB for MultiPointZ (xdr)" do
      wkb_start = "0080000004000000030080000001"

      multi_point = %MultiPointZ{
        points:
          MapSet.new([
            %PointZ{x: 30.0, y: 10.0, z: 15.0},
            %PointZ{x: 20.0, y: 40.0, z: 15.0},
            %PointZ{x: 40.0, y: 40.0, z: 20.0}
          ])
      }

      # Because the order is not guaranteed we test here this way.

      assert result = MultiPointZ.to_wkb(multi_point, endian: :xdr)
      assert String.starts_with?(result, wkb_start)
      assert MultiPointZ.from_wkb!(result) == multi_point
    end

    test "returns WKB for MultiPointZ with srid (ndr)" do
      wkb = """
      01\
      040000A0\
      0F270000\
      01000000\
      01\
      01000080\
      0000000000003E4000000000000024400000000000002E40\
      """

      multi_point = %MultiPointZ{
        points: MapSet.new([%PointZ{x: 30.0, y: 10.0, z: 15.0}])
      }

      assert MultiPointZ.to_wkb(multi_point, srid: 9999) == wkb
    end

    test "returns a WKB for an empty MultiPointZ (xdr)" do
      wkb = """
      00\
      80000004\
      00000000\
      """

      assert MultiPointZ.to_wkb(%MultiPointZ{}, endian: :xdr) == wkb
    end

    test "returns a WKB fro an empty MultiPointZ (ndr)" do
      wkb = """
      01\
      04000080\
      00000000\
      """

      assert MultiPointZ.to_wkb(%MultiPointZ{}) == wkb
    end
  end

  describe "from_wkt!/1" do
    test "returns a MultiPointZ" do
      assert MultiPointZ.from_wkt!("MultiPoint Z (-5.1 7.8 1.1, 0.1 0.2 2.2)") ==
               %MultiPointZ{
                 points:
                   MapSet.new([
                     %PointZ{x: -5.1, y: 7.8, z: 1.1},
                     %PointZ{x: 0.1, y: 0.2, z: 2.2}
                   ])
               }
    end

    test "returns a MultiPointZ with an SRID" do
      assert MultiPointZ.from_wkt!("SRID=7219;MultiPoint Z (-5.1 7.8 1.1, 0.1 0.2 2.2)") ==
               {%MultiPointZ{
                  points:
                    MapSet.new([
                      %PointZ{x: -5.1, y: 7.8, z: 1.1},
                      %PointZ{x: 0.1, y: 0.2, z: 2.2}
                    ])
                }, 7219}
    end

    test "raises an error for an invalid WKT" do
      message = "expected 'SRID', 'Geometry' or 'SRID;Geometry' at 1:0, got: 'Goofy'"

      assert_raise Geometry.Error, message, fn ->
        MultiPointZ.from_wkt!("Goofy")
      end
    end
  end
end
