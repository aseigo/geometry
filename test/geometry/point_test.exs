defmodule Geometry.PointTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case

  import Prove

  alias Geometry.{LineString, Point}

  doctest Geometry.Point, import: true

  @moduletag :point

  describe "new/0:" do
    prove Point.new() == %Point{x: nil, y: nil}
  end

  describe "new/1:" do
    prove Point.new({1, 2}) == %Point{x: 1, y: 2}
    prove Point.new([3, 4]) == %Point{x: 3, y: 4}
  end

  describe "new/1" do
    test "raise an exception for invalid tuple argument" do
      assert_raise FunctionClauseError, fn ->
        Point.new({1, nil, 3, 4})
      end
    end

    test "raise an exception for invalid list argument" do
      assert_raise FunctionClauseError, fn ->
        Point.new([1, 2, 3, nil])
      end
    end
  end

  describe "empty?/1:" do
    prove Point.empty?(Point.new()) == true
    prove Point.empty?(Point.new(1, 2)) == false
  end

  describe "to_wkt/1:" do
    @describetag :wkt

    prove Point.to_wkt(Point.new()) == "Point EMPTY"
    prove Point.to_wkt(Point.new(3.45, 6.78)) == "Point (3.45 6.78)"
  end

  describe "from_wkt/1:" do
    @describetag :wkt

    prove Point.from_wkt("Point (5 4)") == {:ok, %Point{x: 5, y: 4}}

    prove Point.from_wkt("srid=11;Point (1.1 -2.2)") ==
            {:ok, %Point{x: 1.1, y: -2.2}, 11}

    prove Point.from_wkt("LineString (5 7, 3 3)") ==
            {:error, %{expected: Geometry.Point, got: Geometry.LineString}}

    prove Point.from_wkt("Point XY (5 6 7)") == {:error, "expected (", "XY (5 6 7)", {1, 0}, 6}
  end

  describe "from_wkt!/1:" do
    @describetag :wkt

    prove Point.from_wkt!("Point (5 4)") == %Point{x: 5, y: 4}

    prove Point.from_wkt!("srid=11;Point (1.1 -2.2)") ==
            {%Point{x: 1.1, y: -2.2}, 11}

    test "raises an exception" do
      message = "expected ( at 1:6, got: 'XY (5 6 7)'"

      assert_raise Geometry.Error, message, fn ->
        Point.from_wkt!("Point XY (5 6 7)")
      end
    end
  end

  describe "from_wkb/1" do
    @describetag :wkb

    test "returns ok tuple with Point from an xdr-string" do
      wkb = "00000000013FF199999999999A400199999999999A"
      assert Point.from_wkb(wkb) == {:ok, %Point{x: 1.1, y: 2.2}}
    end

    test "returns ok tuple with Point from an ndr-string" do
      wkb = "01010000009A9999999999F13F9A99999999990140"
      assert Point.from_wkb(wkb) == {:ok, %Point{x: 1.1, y: 2.2}}
    end

    test "returns an error tuple for an unexpected geometry" do
      wkb = "000000000200000000"
      assert Point.from_wkb(wkb) == {:error, %{expected: Point, got: LineString}}
    end

    test "returns an error tuple for an invalid WKB" do
      wkb = "foo"

      assert Point.from_wkb(wkb) ==
               {:error, "expected endian flag '00' or '01', got 'fo'", "o", 0}
    end
  end

  describe "from_wkb!/1" do
    @describetag :wkb

    test "returns ok tuple with Point from an xdr-string" do
      wkb = "00000000013FF199999999999A400199999999999A"
      assert Point.from_wkb!(wkb) == %Point{x: 1.1, y: 2.2}
    end

    test "returns ok tuple with Point from an ndr-string" do
      wkb = "01010000009A9999999999F13F9A99999999990140"
      assert Point.from_wkb!(wkb) == %Point{x: 1.1, y: 2.2}
    end

    test "raises an exception for an invalid WKB" do
      wkb = "foo"
      message = "expected endian flag '00' or '01', got 'fo', at position 0"

      assert_raise Geometry.Error, message, fn ->
        Point.from_wkb!(wkb)
      end
    end
  end

  describe "to_wkb/2" do
    @describetag :wkb

    test "returns xdr-string for Point" do
      wkb = "00000000013FF199999999999A400199999999999A"
      assert Point.to_wkb(%Point{x: 1.1, y: 2.2}, endian: :xdr) == wkb
    end

    test "returns ndr-string for Point" do
      wkb = "01010000009A9999999999F13F9A99999999990140"
      assert Point.to_wkb(%Point{x: 1.1, y: 2.2}) == wkb
    end
  end

  describe "to_geo_json/1:" do
    @describetag :geo_json

    prove Point.to_geo_json(Point.new(3.45, 6.78)) == %{
            "type" => "Point",
            "coordinates" => [3.45, 6.78]
          }
  end

  describe "to_geo_json/1" do
    @describetag :geo_json

    test "raise an exception for an empty point" do
      assert_raise FunctionClauseError, fn ->
        Point.to_geo_json(Point.new())
      end
    end
  end

  describe "from_geo_json/1:" do
    @describetag :geo_json

    @geo_json Jason.decode!("""
              {
                "type": "Point",
                "coordinates": [1.2, 2.3],
                "foo": 42
              }
              """)

    @geo_json_invalid Jason.decode!("""
                      {"type": "Point", "coordinates": ["invalid"]}
                      """)

    prove Point.from_geo_json(@geo_json) == {:ok, %Point{x: 1.2, y: 2.3}}
    prove Point.from_geo_json(%{}) == {:error, :type_not_found}
    prove Point.from_geo_json(%{"type" => "Point"}) == {:error, :coordinates_not_found}
    prove Point.from_geo_json(@geo_json_invalid) == {:error, :invalid_data}
  end

  describe "from_geo_json!/1" do
    @describetag :geo_json

    test "returns Point" do
      geo_json =
        Jason.decode!("""
        {
          "type": "Point",
          "coordinates": [1.2, 2.3],
          "foo": 42
        }
        """)

      assert Point.from_geo_json!(geo_json) == %Point{x: 1.2, y: 2.3}
    end

    test "raises an exception" do
      geo_json = %{"type" => "Point"}
      message = "coordinates not found"

      assert_raise Geometry.Error, message, fn ->
        Point.from_geo_json!(geo_json)
      end
    end
  end

  describe "to_list/1:" do
    prove Point.to_list(Point.new(5, 7)) == [5, 7]
  end
end
