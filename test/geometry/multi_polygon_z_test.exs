defmodule Geometry.MultiPolygonZTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case

  alias Geometry.{
    MultiPolygonZ,
    PointZ,
    PolygonZ
  }

  doctest Geometry.MultiPolygonZ, import: true

  @moduletag :multi_plygon

  describe "to_geo_json/1" do
    test "returns geo-json-term" do
      geo_json =
        [
          [{6, 2, 3}, {8, 2, 4}, {8, 4, 5}, {6, 2, 3}],
          [[{60, 20, 30}, {80, 20, 40}, {80, 40, 50}, {60, 20, 30}]],
          [
            [{1, 1, 3}, {9, 1, 4}, {9, 8, 5}, {1, 1, 3}],
            [{6, 2, 4}, {7, 2, 6}, {7, 3, 3}, {6, 2, 4}]
          ]
        ]
        |> MultiPolygonZ.from_coordinates()
        |> MultiPolygonZ.to_geo_json()

      assert GeoJsonValidator.valid?(geo_json)

      assert geo_json |> Map.keys() |> Enum.sort() == ["coordinates", "type"]
      assert Map.get(geo_json, "type") == "MultiPolygon"

      assert geo_json |> Map.get("coordinates") |> Enum.sort() ==
               [
                 [
                   [[1, 1, 3], [9, 1, 4], [9, 8, 5], [1, 1, 3]],
                   [[6, 2, 4], [7, 2, 6], [7, 3, 3], [6, 2, 4]]
                 ],
                 [
                   [[6, 2, 3], [8, 2, 4], [8, 4, 5], [6, 2, 3]]
                 ],
                 [
                   [[60, 20, 30], [80, 20, 40], [80, 40, 50], [60, 20, 30]]
                 ]
               ]
    end
  end

  describe "from_geo_json!/1" do
    test "returns MultiPolygonZ" do
      geo_json =
        Jason.decode!("""
         {
           "type": "MultiPolygon",
           "coordinates": [
             [
               [[6, 2, 3], [8, 2, 4], [8, 4, 5], [6, 2, 3]]
             ], [
               [[1, 1, 3], [9, 1, 4], [9, 8, 5], [1, 1, 3]],
               [[6, 2, 4], [7, 2, 6], [7, 3, 3], [6, 2, 4]]
             ]
           ]
         }
        """)

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 1, y: 1, z: 3},
                %PointZ{x: 9, y: 1, z: 4},
                %PointZ{x: 9, y: 8, z: 5},
                %PointZ{x: 1, y: 1, z: 3}
              ],
              interiors: [
                [
                  %PointZ{x: 6, y: 2, z: 4},
                  %PointZ{x: 7, y: 2, z: 6},
                  %PointZ{x: 7, y: 3, z: 3},
                  %PointZ{x: 6, y: 2, z: 4}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 6, y: 2, z: 3},
                %PointZ{x: 8, y: 2, z: 4},
                %PointZ{x: 8, y: 4, z: 5},
                %PointZ{x: 6, y: 2, z: 3}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_geo_json!(geo_json) == multi_polygon
    end

    test "raises an error for an invalid geo-json-term" do
      message = "type not found"

      assert_raise Geometry.Error, message, fn ->
        MultiPolygonZ.from_geo_json!(%{})
      end
    end
  end

  describe "from_wkt/1" do
    test "returns MultiPolygonZ" do
      wkt = """
      MULTIPOLYGON Z (
        (
           (40 40 10, 20 45 20, 45 30 15, 40 40 10)
        ), (
           (20 35 20, 10 30 10, 10 10 30, 30 5 10, 45 20 10, 20 35 20),
           (30 20 10, 20 15 20, 20 25 15, 30 20 10)
        )
      )
      """

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 20, y: 35, z: 20},
                %PointZ{x: 10, y: 30, z: 10},
                %PointZ{x: 10, y: 10, z: 30},
                %PointZ{x: 30, y: 5, z: 10},
                %PointZ{x: 45, y: 20, z: 10},
                %PointZ{x: 20, y: 35, z: 20}
              ],
              interiors: [
                [
                  %PointZ{x: 30, y: 20, z: 10},
                  %PointZ{x: 20, y: 15, z: 20},
                  %PointZ{x: 20, y: 25, z: 15},
                  %PointZ{x: 30, y: 20, z: 10}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 40, y: 40, z: 10},
                %PointZ{x: 20, y: 45, z: 20},
                %PointZ{x: 45, y: 30, z: 15},
                %PointZ{x: 40, y: 40, z: 10}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_wkt(wkt) == {:ok, multi_polygon}
    end
  end

  describe "from_wkt!/1" do
    test "returns MultiPolygonZ" do
      wkt = """
       MULTIPOLYGON Z (
         (
            (40 40 10, 20 45 20, 45 30 15, 40 40 10)
         ), (
            (20 35 20, 10 30 10, 10 10 30, 30 5 10, 45 20 10, 20 35 20),
            (30 20 10, 20 15 20, 20 25 15, 30 20 10)
         )
      )
      """

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 20, y: 35, z: 20},
                %PointZ{x: 10, y: 30, z: 10},
                %PointZ{x: 10, y: 10, z: 30},
                %PointZ{x: 30, y: 5, z: 10},
                %PointZ{x: 45, y: 20, z: 10},
                %PointZ{x: 20, y: 35, z: 20}
              ],
              interiors: [
                [
                  %PointZ{x: 30, y: 20, z: 10},
                  %PointZ{x: 20, y: 15, z: 20},
                  %PointZ{x: 20, y: 25, z: 15},
                  %PointZ{x: 30, y: 20, z: 10}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 40, y: 40, z: 10},
                %PointZ{x: 20, y: 45, z: 20},
                %PointZ{x: 45, y: 30, z: 15},
                %PointZ{x: 40, y: 40, z: 10}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_wkt!(wkt) == multi_polygon
    end

    test "returns MultiPolygonZ with SRID" do
      wkt = """
       SRID=1234;MULTIPOLYGON Z (
         (
            (40 40 10, 20 45 20, 45 30 15, 40 40 10)
         ), (
            (20 35 20, 10 30 10, 10 10 30, 30 5 10, 45 20 10, 20 35 20),
            (30 20 10, 20 15 20, 20 25 15, 30 20 10)
         )
      )
      """

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 20, y: 35, z: 20},
                %PointZ{x: 10, y: 30, z: 10},
                %PointZ{x: 10, y: 10, z: 30},
                %PointZ{x: 30, y: 5, z: 10},
                %PointZ{x: 45, y: 20, z: 10},
                %PointZ{x: 20, y: 35, z: 20}
              ],
              interiors: [
                [
                  %PointZ{x: 30, y: 20, z: 10},
                  %PointZ{x: 20, y: 15, z: 20},
                  %PointZ{x: 20, y: 25, z: 15},
                  %PointZ{x: 30, y: 20, z: 10}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 40, y: 40, z: 10},
                %PointZ{x: 20, y: 45, z: 20},
                %PointZ{x: 45, y: 30, z: 15},
                %PointZ{x: 40, y: 40, z: 10}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_wkt!(wkt) == {multi_polygon, 1234}
    end

    test "raises an exception for invalid WKT" do
      message = "expected 'SRID', 'Geometry' or 'SRID;Geometry' at 1:0, got: 'Pluto'"

      assert_raise Geometry.Error, message, fn ->
        MultiPolygonZ.from_wkt!("Pluto")
      end
    end
  end

  describe "to_wkt/2" do
    test "returns wkt-string" do
      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 20, y: 35, z: 20},
                %PointZ{x: 10, y: 30, z: 10},
                %PointZ{x: 10, y: 10, z: 30},
                %PointZ{x: 30, y: 5, z: 10},
                %PointZ{x: 45, y: 20, z: 10},
                %PointZ{x: 20, y: 35, z: 20}
              ],
              interiors: [
                [
                  %PointZ{x: 30, y: 20, z: 10},
                  %PointZ{x: 20, y: 15, z: 20},
                  %PointZ{x: 20, y: 25, z: 15},
                  %PointZ{x: 30, y: 20, z: 10}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 40, y: 40, z: 10},
                %PointZ{x: 20, y: 45, z: 20},
                %PointZ{x: 45, y: 30, z: 15},
                %PointZ{x: 40, y: 40, z: 10}
              ],
              interiors: []
            }
          ])
      }

      wkt = MultiPolygonZ.to_wkt(multi_polygon)

      assert String.starts_with?(wkt, "MultiPolygon Z")

      assert wkt =~
               "((20 35 20, 10 30 10, 10 10 30, 30 5 10, 45 20 10, 20 35 20)" <>
                 ", (30 20 10, 20 15 20, 20 25 15, 30 20 10))"

      assert wkt =~ "((40 40 10, 20 45 20, 45 30 15, 40 40 10))"

      wkt_srid = MultiPolygonZ.to_wkt(multi_polygon, srid: 478)

      assert String.starts_with?(wkt_srid, "SRID=478;MultiPolygon Z")

      assert wkt_srid =~
               "((20 35 20, 10 30 10, 10 10 30, 30 5 10, 45 20 10, 20 35 20)" <>
                 ", (30 20 10, 20 15 20, 20 25 15, 30 20 10))"

      assert wkt_srid =~ "((40 40 10, 20 45 20, 45 30 15, 40 40 10))"
    end
  end

  describe "from_wkb/1" do
    test "returns a MultiPolygonZ (ndr)" do
      wkb = """
      01\
      06000080\
      02000000\
      01\
      03000080\
      02000000\
      04000000\
      000000000000F03F000000000000F03F0000000000000840\
      0000000000002240000000000000F03F0000000000001040\
      000000000000224000000000000020400000000000001440\
      000000000000F03F000000000000F03F0000000000000840\
      04000000\
      000000000000184000000000000000400000000000001040\
      0000000000001C4000000000000000400000000000001840\
      0000000000001C4000000000000008400000000000000840\
      000000000000184000000000000000400000000000001040\
      01\
      03000080\
      01000000\
      04000000\
      000000000000184000000000000000400000000000000840\
      000000000000204000000000000000400000000000001040\
      000000000000204000000000000010400000000000001440\
      000000000000184000000000000000400000000000000840\
      """

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 1.0, y: 1.0, z: 3.0},
                %PointZ{x: 9.0, y: 1.0, z: 4.0},
                %PointZ{x: 9.0, y: 8.0, z: 5.0},
                %PointZ{x: 1.0, y: 1.0, z: 3.0}
              ],
              interiors: [
                [
                  %PointZ{x: 6.0, y: 2.0, z: 4.0},
                  %PointZ{x: 7.0, y: 2.0, z: 6.0},
                  %PointZ{x: 7.0, y: 3.0, z: 3.0},
                  %PointZ{x: 6.0, y: 2.0, z: 4.0}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 6.0, y: 2.0, z: 3.0},
                %PointZ{x: 8.0, y: 2.0, z: 4.0},
                %PointZ{x: 8.0, y: 4.0, z: 5.0},
                %PointZ{x: 6.0, y: 2.0, z: 3.0}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_wkb(wkb) == {:ok, multi_polygon}
    end
  end

  describe "to_wkb/2" do
    test "returns WKB for PolygonZ" do
      wkb_start = "0106000080020000000103000080"

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 1.0, y: 1.0, z: 3.0},
                %PointZ{x: 9.0, y: 1.0, z: 4.0},
                %PointZ{x: 9.0, y: 8.0, z: 5.0},
                %PointZ{x: 1.0, y: 1.0, z: 3.0}
              ],
              interiors: [
                [
                  %PointZ{x: 6.0, y: 2.0, z: 4.0},
                  %PointZ{x: 7.0, y: 2.0, z: 6.0},
                  %PointZ{x: 7.0, y: 3.0, z: 3.0},
                  %PointZ{x: 6.0, y: 2.0, z: 4.0}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 6.0, y: 2.0, z: 3.0},
                %PointZ{x: 8.0, y: 2.0, z: 4.0},
                %PointZ{x: 8.0, y: 4.0, z: 5.0},
                %PointZ{x: 6.0, y: 2.0, z: 3.0}
              ],
              interiors: []
            }
          ])
      }

      assert result = MultiPolygonZ.to_wkb(multi_polygon)
      assert String.starts_with?(result, wkb_start)
      assert MultiPolygonZ.from_wkb!(result) == multi_polygon
    end
  end

  describe "from_wkb!/1" do
    test "returns a MultiPolygonZ (ndr)" do
      wkb = """
      01\
      06000080\
      02000000\
      01\
      03000080\
      02000000\
      04000000\
      000000000000F03F000000000000F03F0000000000000840\
      0000000000002240000000000000F03F0000000000001040\
      000000000000224000000000000020400000000000001440\
      000000000000F03F000000000000F03F0000000000000840\
      04000000\
      000000000000184000000000000000400000000000001040\
      0000000000001C4000000000000000400000000000001840\
      0000000000001C4000000000000008400000000000000840\
      000000000000184000000000000000400000000000001040\
      01\
      03000080\
      01000000\
      04000000\
      000000000000184000000000000000400000000000000840\
      000000000000204000000000000000400000000000001040\
      000000000000204000000000000010400000000000001440\
      000000000000184000000000000000400000000000000840\
      """

      multi_polygon = %MultiPolygonZ{
        polygons:
          MapSet.new([
            %PolygonZ{
              exterior: [
                %PointZ{x: 1.0, y: 1.0, z: 3.0},
                %PointZ{x: 9.0, y: 1.0, z: 4.0},
                %PointZ{x: 9.0, y: 8.0, z: 5.0},
                %PointZ{x: 1.0, y: 1.0, z: 3.0}
              ],
              interiors: [
                [
                  %PointZ{x: 6.0, y: 2.0, z: 4.0},
                  %PointZ{x: 7.0, y: 2.0, z: 6.0},
                  %PointZ{x: 7.0, y: 3.0, z: 3.0},
                  %PointZ{x: 6.0, y: 2.0, z: 4.0}
                ]
              ]
            },
            %PolygonZ{
              exterior: [
                %PointZ{x: 6.0, y: 2.0, z: 3.0},
                %PointZ{x: 8.0, y: 2.0, z: 4.0},
                %PointZ{x: 8.0, y: 4.0, z: 5.0},
                %PointZ{x: 6.0, y: 2.0, z: 3.0}
              ],
              interiors: []
            }
          ])
      }

      assert MultiPolygonZ.from_wkb!(wkb) == multi_polygon
    end

    test "raises an error for an invalid WKB" do
      message = "expected endian flag '00' or '01', at position 0"

      assert_raise Geometry.Error, message, fn ->
        MultiPolygonZ.from_wkb!("")
      end
    end
  end
end
