defmodule Geometry.GeometryCollectionTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case, async: true

  alias Geometry.{
    GeometryCollection,
    Hex,
    LineString,
    Point,
    Polygon
  }

  doctest Geometry.GeometryCollection, import: true

  @moduletag :geometry_collection

  describe "to_wkb/2" do
    test "returns WKB as ndr-binary for a GeometryCollection" do
      collection =
        GeometryCollection.new([
          Point.new(1.1, 2.2),
          LineString.new([
            Point.new(1.1, 1.2),
            Point.new(2.1, 2.2)
          ]),
          Polygon.new([
            LineString.new([
              Point.new(1.1, 1.2),
              Point.new(2.1, 2.2),
              Point.new(3.3, 2.2),
              Point.new(1.1, 1.2)
            ])
          ])
        ])

      wkb = """
      01\
      07000000\
      03000000\
      """

      assert result = GeometryCollection.to_wkb(collection, endian: :ndr)
      assert String.starts_with?(result, Hex.to_binary(wkb))
      assert GeometryCollection.from_wkb!(result) == collection
    end

    test "returns WKB as ndr-string for a GeometryCollection" do
      collection =
        GeometryCollection.new([
          Point.new(1.1, 2.2),
          LineString.new([
            Point.new(1.1, 1.2),
            Point.new(2.1, 2.2)
          ]),
          Polygon.new([
            LineString.new([
              Point.new(1.1, 1.2),
              Point.new(2.1, 2.2),
              Point.new(3.3, 2.2),
              Point.new(1.1, 1.2)
            ])
          ])
        ])

      wkb = """
      01\
      07000000\
      03000000\
      """

      assert result = GeometryCollection.to_wkb(collection, endian: :ndr, mode: :hex)
      assert String.starts_with?(result, wkb)
      assert GeometryCollection.from_wkb!(result, :hex) == collection
    end

    test "returns WKB as xdr-string for a GeometryCollection" do
      wkb = "000000000700000000"

      assert GeometryCollection.to_wkb(GeometryCollection.new(), mode: :hex) == wkb
    end

    test "returns WKB as xdr-binary for a GeometryCollection" do
      wkb = "000000000700000000"

      assert GeometryCollection.to_wkb(GeometryCollection.new()) == Hex.to_binary(wkb)
    end

    test "returns WKB as ndr-string for a GeometryCollection with SRID" do
      wkb = "01070000207B00000000000000"

      assert GeometryCollection.to_wkb(
               GeometryCollection.new(),
               endian: :ndr,
               srid: 123,
               mode: :hex
             ) == wkb
    end

    test "returns WKB as ndr-binary for a GeometryCollection with SRID" do
      wkb = "01070000207B00000000000000"

      assert GeometryCollection.to_wkb(
               GeometryCollection.new(),
               endian: :ndr,
               srid: 123
             ) == Hex.to_binary(wkb)
    end

    test "returns WKB as xdr-string for a GeometryCollection with SRID" do
      wkb = "00200000070000014100000000"

      assert GeometryCollection.to_wkb(
               GeometryCollection.new(),
               srid: 321,
               mode: :hex
             ) == wkb
    end

    test "returns WKB as xdr-binary for a GeometryCollection with SRID" do
      wkb = "00200000070000014100000000"

      assert GeometryCollection.to_wkb(
               GeometryCollection.new(),
               srid: 321
             ) == Hex.to_binary(wkb)
    end
  end

  describe "from_wkb!/2" do
    test "returns an empty GeometryCollection from ndr-string" do
      wkb = "010700000000000000"

      assert GeometryCollection.from_wkb!(wkb, :hex) == %GeometryCollection{}
    end

    test "returns an empty GeometryCollection from ndr-binary" do
      wkb = "010700000000000000"

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb!() == %GeometryCollection{}
    end

    test "returns a GeometryCollection from ndr-string" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb!(wkb, :hex) ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
               }
    end

    test "returns a GeometryCollection from ndr-binary" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb!() ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
               }
    end

    test "returns a GeometryCollection with an SRID from ndr-string" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb!(wkb, :hex) ==
               {%GeometryCollection{
                  geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                }, 55}
    end

    test "returns a GeometryCollection with an SRID from ndr-binary" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb!() ==
               {%GeometryCollection{
                  geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                }, 55}
    end

    test "raises an error for an unexpected SRID in ndr-string" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      message = "unexpected SRID in sub-geometry, at position 100"

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_wkb!(wkb, :hex)
      end
    end

    test "raises an error for an unexpected SRID in ndr-binary" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      message = "unexpected SRID in sub-geometry, at position 50"

      assert_raise Geometry.Error, message, fn ->
        wkb |> Hex.to_binary() |> GeometryCollection.from_wkb!()
      end
    end
  end

  describe "from_wkb/2" do
    test "returns an empty GeometryCollection from ndr-string" do
      wkb = "010700000000000000"

      assert GeometryCollection.from_wkb(wkb, :hex) == {:ok, %GeometryCollection{}}
    end

    test "returns an empty GeometryCollection from ndr-binary" do
      wkb = "010700000000000000"

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb() ==
               {:ok, %GeometryCollection{}}
    end

    test "returns a GeometryCollection from ndr-string" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb(wkb, :hex) ==
               {:ok,
                %GeometryCollection{
                  geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                }}
    end

    test "returns a GeometryCollection from ndr-binary" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb() ==
               {:ok,
                %GeometryCollection{
                  geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                }}
    end

    test "returns a GeometryCollection with an SRID from ndr-string" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb(wkb, :hex) ==
               {:ok,
                {
                  %GeometryCollection{
                    geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                  },
                  55
                }}
    end

    test "returns a GeometryCollection with an SRID from ndr-binary" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert wkb |> Hex.to_binary() |> GeometryCollection.from_wkb() ==
               {:ok,
                {
                  %GeometryCollection{
                    geometries: MapSet.new([%Point{coordinate: [1.0, 2.0]}])
                  },
                  55
                }}
    end

    test "returns an error for an unexpected SRID in ndr-string" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      assert {:error, "unexpected SRID in sub-geometry", _rest, 100} =
               GeometryCollection.from_wkb(wkb, :hex)
    end

    test "returns an error for an unexpected SRID in ndr-binary" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      assert {:error, "unexpected SRID in sub-geometry", _rest, 50} =
               wkb |> Hex.to_binary() |> GeometryCollection.from_wkb()
    end
  end

  describe "from_wkt/1" do
    test "returns a GeometryCollection" do
      assert GeometryCollection.from_wkt("GeometryCollection (Point (1.1 2.2))") ==
               {
                 :ok,
                 %GeometryCollection{
                   geometries: MapSet.new([%Point{coordinate: [1.1, 2.2]}])
                 }
               }
    end

    test "returns a GeometryCollection with an SRID" do
      assert GeometryCollection.from_wkt(
               "SRID=123;GeometryCollection (Point (1.1 2.2))"
             ) ==
               {
                 :ok,
                 {
                   %GeometryCollection{
                     geometries: MapSet.new([%Point{coordinate: [1.1, 2.2]}])
                   },
                   123
                 }
               }
    end

    test "returns an error for an unexpected SRID" do
      wkt = "SRID=123;GeometryCollection (SRID=666;Point (1.1 2.2))"

      assert {:error, "unexpected SRID in collection", "(1.1 2.2))", {1, 0}, _offset} =
               GeometryCollection.from_wkt(wkt)
    end
  end

  describe "from_wkt!/1" do
    test "returns a GeometryCollection" do
      assert GeometryCollection.from_wkt!("GeometryCollection (Point (1.1 2.2))") ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{coordinate: [1.1, 2.2]}])
               }
    end

    test "returns a GeometryCollection with an SRID" do
      assert GeometryCollection.from_wkt!(
               "SRID=123;GeometryCollection (Point (1.1 2.2))"
             ) ==
               {%GeometryCollection{
                  geometries: MapSet.new([%Point{coordinate: [1.1, 2.2]}])
                }, 123}
    end

    test "raises an error for an invalid WKT" do
      message = ~s(no data found at 1:0, got: "")

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_wkt!("")
      end
    end
  end

  describe "from_geo_json!" do
    test "return GeometryCollection" do
      geo_json =
        Jason.decode!("""
          {
            "type": "GeometryCollection",
            "geometries": [
              {"type": "Point", "coordinates": [1.1, 2.2]}
            ]
          }
        """)

      assert GeometryCollection.from_geo_json!(geo_json) ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{coordinate: [1.1, 2.2]}])
               }
    end

    test "raises an error for invalid data" do
      geo_json =
        Jason.decode!("""
          {
            "type": "GeometryCollection",
            "geometries": [
              {"type": "Point", "coordinates": ["evil", 2.2, 3.3, 4.4]}
            ]
          }
        """)

      message = "invalid data"

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_geo_json!(geo_json)
      end
    end
  end

  test "Enum.slice/3" do
    collection =
      GeometryCollection.new([
        Point.new(11, 12),
        LineString.new([
          Point.new(21, 22),
          Point.new(31, 32)
        ])
      ])

    assert [_geometry] = Enum.slice(collection, 0, 1)
  end
end
