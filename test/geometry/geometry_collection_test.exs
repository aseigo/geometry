defmodule Geometry.GeometryCollectionTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case, async: true

  alias Geometry.{
    GeometryCollection,
    LineString,
    Point,
    Polygon
  }

  doctest Geometry.GeometryCollection, import: true

  @moduletag :geometry_collection

  describe "to_wkb/2" do
    test "returns WKB for a GeometryCollection" do
      collection =
        GeometryCollection.new([
          Point.new(1.1, 2.2),
          LineString.new([
            Point.new(1.1, 1.2),
            Point.new(2.1, 2.2)
          ]),
          Polygon.new([
            Point.new(1.1, 1.2),
            Point.new(2.1, 2.2),
            Point.new(3.3, 2.2),
            Point.new(1.1, 1.2)
          ])
        ])

      wkb = """
      01\
      07000000\
      03000000\
      """

      assert result = GeometryCollection.to_wkb(collection)
      assert String.starts_with?(result, wkb)
      assert GeometryCollection.from_wkb!(result) == collection
    end
  end

  describe "from_wkb!/1" do
    test "returns an empty GeometryCollection" do
      wkb = "010700000000000000"

      assert GeometryCollection.from_wkb!(wkb) == %GeometryCollection{}
    end

    test "returns a GeometryCollection" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb!(wkb) ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{x: 1.0, y: 2.0}])
               }
    end

    test "returns a GeometryCollection with an SRID" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb!(wkb) ==
               {%GeometryCollection{
                  geometries: MapSet.new([%Point{x: 1.0, y: 2.0}])
                }, 55}
    end

    test "raises an error for an unexpected SRID" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      message = "unexpected SRID in sub-geometry, at position 100"

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_wkb!(wkb)
      end
    end
  end

  describe "from_wkb/1" do
    test "returns an empty GeometryCollection" do
      wkb = "010700000000000000"

      assert GeometryCollection.from_wkb(wkb) == {:ok, %GeometryCollection{}}
    end

    test "returns a GeometryCollection" do
      wkb = """
      01\
      07000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb(wkb) ==
               {:ok,
                %GeometryCollection{
                  geometries: MapSet.new([%Point{x: 1.0, y: 2.0}])
                }}
    end

    test "returns a GeometryCollection with an SRID" do
      wkb = """
      01\
      07000020\
      37000000\
      01000000\
      01\
      01000000\
      000000000000F03F0000000000000040\
      """

      assert GeometryCollection.from_wkb(wkb) ==
               {:ok,
                %GeometryCollection{
                  geometries: MapSet.new([%Point{x: 1.0, y: 2.0}])
                }, 55}
    end

    test "returns an error for an unexpected SRID" do
      wkb = """
      01\
      070000C0\
      01000000\
      01\
      010000E0\
      37000000\
      000000000000F03F000000000000004000000000000008400000000000001040\
      """

      assert {:error, "unexpected SRID in sub-geometry", _rest, 100} =
               GeometryCollection.from_wkb(wkb)
    end
  end

  describe "from_wkt/1" do
    test "returns a GeometryCollection" do
      assert GeometryCollection.from_wkt("GeometryCollection (Point (1.1 2.2))") ==
               {
                 :ok,
                 %GeometryCollection{
                   geometries: MapSet.new([%Point{x: 1.1, y: 2.2}])
                 }
               }
    end

    test "returns a GeometryCollection with an SRID" do
      assert GeometryCollection.from_wkt("SRID=123;GeometryCollection (Point (1.1 2.2))") ==
               {
                 :ok,
                 %GeometryCollection{
                   geometries: MapSet.new([%Point{x: 1.1, y: 2.2}])
                 },
                 123
               }
    end

    test "returns an error for an unexpected SRID" do
      wkt = "SRID=123;GeometryCollection (SRID=666;Point (1.1 2.2))"

      assert {:error, "unexpected SRID in collection", "(1.1 2.2))", {1, 0}, _offset} =
               GeometryCollection.from_wkt(wkt)
    end
  end

  describe "from_wkt!/1" do
    test "returns a GeometryCollection" do
      assert GeometryCollection.from_wkt!("GeometryCollection (Point (1.1 2.2))") ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{x: 1.1, y: 2.2}])
               }
    end

    test "returns a GeometryCollection with an SRID" do
      assert GeometryCollection.from_wkt!("SRID=123;GeometryCollection (Point (1.1 2.2))") ==
               {%GeometryCollection{
                  geometries: MapSet.new([%Point{x: 1.1, y: 2.2}])
                }, 123}
    end

    test "raises an error for an invalid WKT" do
      message = "no data found at 1:0, got: ''"

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_wkt!("")
      end
    end
  end

  describe "from_geo_json!" do
    test "return GeometryCollection" do
      geo_json =
        Jason.decode!("""
          {
            "type": "GeometryCollection",
            "geometries": [
              {"type": "Point", "coordinates": [1.1, 2.2]}
            ]
          }
        """)

      assert GeometryCollection.from_geo_json!(geo_json) ==
               %GeometryCollection{
                 geometries: MapSet.new([%Point{x: 1.1, y: 2.2}])
               }
    end

    test "raises an error for invalid data" do
      geo_json =
        Jason.decode!("""
          {
            "type": "GeometryCollection",
            "geometries": [
              {"type": "Point", "coordinates": ["evil", 2.2, 3.3, 4.4]}
            ]
          }
        """)

      message = "invalid data"

      assert_raise Geometry.Error, message, fn ->
        GeometryCollection.from_geo_json!(geo_json)
      end
    end
  end
end
