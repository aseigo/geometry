defmodule Geometry.PolygonTest do
  # This file is auto-generated by `mix geometry.gen`.
  # The ZM version of this file is used as a template.

  use ExUnit.Case

  alias Geometry.{Point, Polygon}

  doctest Geometry.Polygon, import: true

  describe "from_wkb/1" do
    test "returns Polygon (xdr)" do
      wkb = """
      00\
      00000003\
      00000001\
      00000005\
      403E0000000000004024000000000000\
      40440000000000004044000000000000\
      40340000000000004044000000000000\
      40240000000000004034000000000000\
      403E0000000000004024000000000000\
      """

      assert Polygon.from_wkb(wkb) ==
               {:ok,
                %Polygon{
                  exterior: [
                    %Point{x: 30.0, y: 10.0},
                    %Point{x: 40.0, y: 40.0},
                    %Point{x: 20.0, y: 40.0},
                    %Point{x: 10.0, y: 20.0},
                    %Point{x: 30.0, y: 10.0}
                  ],
                  interiors: []
                }}
    end

    test "returns Polygon with hole and SRID (ndr) " do
      wkb = """
      01\
      03000020\
      4D010000\
      02000000\
      05000000\
      00000000008041400000000000002440\
      00000000008046400000000000804640\
      0000000000002E400000000000004440\
      00000000000024400000000000003440\
      00000000008041400000000000002440\
      04000000\
      00000000000034400000000000003E40\
      00000000008041400000000000804140\
      0000000000003E400000000000003440\
      00000000000034400000000000003E40\
      """

      assert Polygon.from_wkb(wkb) ==
               {:ok,
                %Polygon{
                  exterior: [
                    %Point{x: 35.0, y: 10.0},
                    %Point{x: 45.0, y: 45.0},
                    %Point{x: 15.0, y: 40.0},
                    %Point{x: 10.0, y: 20.0},
                    %Point{x: 35.0, y: 10.0}
                  ],
                  interiors: [
                    [
                      %Point{x: 20.0, y: 30.0},
                      %Point{x: 35.0, y: 35.0},
                      %Point{x: 30.0, y: 20.0},
                      %Point{x: 20.0, y: 30.0}
                    ]
                  ]
                }, 333}
    end
  end

  describe "to_wkb/1" do
    test "returns Polygon (xdr)" do
      wkb = """
      00\
      00000003\
      00000001\
      00000005\
      403E0000000000004024000000000000\
      40440000000000004044000000000000\
      40340000000000004044000000000000\
      40240000000000004034000000000000\
      403E0000000000004024000000000000\
      """

      polygon = %Polygon{
        exterior: [
          %Point{x: 30.0, y: 10.0},
          %Point{x: 40.0, y: 40.0},
          %Point{x: 20.0, y: 40.0},
          %Point{x: 10.0, y: 20.0},
          %Point{x: 30.0, y: 10.0}
        ],
        interiors: []
      }

      assert Polygon.to_wkb(polygon, endian: :xdr) == wkb
    end

    test "returns Polygon with hole and SRID (ndr) " do
      wkb = """
      01\
      03000020\
      4D010000\
      02000000\
      05000000\
      00000000008041400000000000002440\
      00000000008046400000000000804640\
      0000000000002E400000000000004440\
      00000000000024400000000000003440\
      00000000008041400000000000002440\
      04000000\
      00000000000034400000000000003E40\
      00000000008041400000000000804140\
      0000000000003E400000000000003440\
      00000000000034400000000000003E40\
      """

      polygon = %Polygon{
        exterior: [
          %Point{x: 35.0, y: 10.0},
          %Point{x: 45.0, y: 45.0},
          %Point{x: 15.0, y: 40.0},
          %Point{x: 10.0, y: 20.0},
          %Point{x: 35.0, y: 10.0}
        ],
        interiors: [
          [
            %Point{x: 20.0, y: 30.0},
            %Point{x: 35.0, y: 35.0},
            %Point{x: 30.0, y: 20.0},
            %Point{x: 20.0, y: 30.0}
          ]
        ]
      }

      assert Polygon.to_wkb(polygon, srid: 333) == wkb
    end
  end

  describe "from_wkb!/1" do
    test "returns Polygon (xdr)" do
      wkb = """
      00\
      00000003\
      00000001\
      00000005\
      403E0000000000004024000000000000\
      40440000000000004044000000000000\
      40340000000000004044000000000000\
      40240000000000004034000000000000\
      403E0000000000004024000000000000\
      """

      assert Polygon.from_wkb!(wkb) ==
               %Polygon{
                 exterior: [
                   %Point{x: 30.0, y: 10.0},
                   %Point{x: 40.0, y: 40.0},
                   %Point{x: 20.0, y: 40.0},
                   %Point{x: 10.0, y: 20.0},
                   %Point{x: 30.0, y: 10.0}
                 ],
                 interiors: []
               }
    end

    test "returns Polygon with hole and SRID (ndr) " do
      wkb = """
      01\
      03000020\
      4D010000\
      02000000\
      05000000\
      00000000008041400000000000002440\
      00000000008046400000000000804640\
      0000000000002E400000000000004440\
      00000000000024400000000000003440\
      00000000008041400000000000002440\
      04000000\
      00000000000034400000000000003E40\
      00000000008041400000000000804140\
      0000000000003E400000000000003440\
      00000000000034400000000000003E40\
      """

      assert Polygon.from_wkb!(wkb) ==
               {%Polygon{
                  exterior: [
                    %Point{x: 35.0, y: 10.0},
                    %Point{x: 45.0, y: 45.0},
                    %Point{x: 15.0, y: 40.0},
                    %Point{x: 10.0, y: 20.0},
                    %Point{x: 35.0, y: 10.0}
                  ],
                  interiors: [
                    [
                      %Point{x: 20.0, y: 30.0},
                      %Point{x: 35.0, y: 35.0},
                      %Point{x: 30.0, y: 20.0},
                      %Point{x: 20.0, y: 30.0}
                    ]
                  ]
                }, 333}
    end

    test "raises an error for an invalid WKB" do
      wkb = "ABCD"
      message = "expected endian flag '00' or '01', got 'AB', at position 0"

      assert_raise Geometry.Error, message, fn ->
        Polygon.from_wkb!(wkb)
      end
    end
  end

  describe "from_geo_json!/1" do
    test "returns Polygon" do
      geo_json =
        Jason.decode!("""
         {
           "type": "Polygon",
           "coordinates": [
             [[35, 10],
              [45, 45],
              [15, 40],
              [10, 20],
              [35, 10]]
           ]
         }
        """)

      assert Polygon.from_geo_json!(geo_json)

      %Polygon{
        exterior: [
          %Point{x: 35, y: 10},
          %Point{x: 45, y: 45},
          %Point{x: 15, y: 40},
          %Point{x: 10, y: 20},
          %Point{x: 35, y: 10}
        ],
        interiors: []
      }
    end

    test "raises an error for an invalid GeoJson" do
      geo_json = %{}
      message = "type not found"

      assert_raise Geometry.Error, message, fn ->
        Polygon.from_geo_json!(geo_json)
      end
    end
  end

  describe "from_wkt!/1" do
    test "returns a Polygon" do
      wkt = """
        POLYGON (
          (35 10, 45 45, 15 40, 10 20, 35 10),
          (20 30, 35 35, 30 20, 20 30)
        )
      """

      assert Polygon.from_wkt!(wkt) ==
               %Polygon{
                 exterior: [
                   %Point{x: 35, y: 10},
                   %Point{x: 45, y: 45},
                   %Point{x: 15, y: 40},
                   %Point{x: 10, y: 20},
                   %Point{x: 35, y: 10}
                 ],
                 interiors: [
                   [
                     %Point{x: 20, y: 30},
                     %Point{x: 35, y: 35},
                     %Point{x: 30, y: 20},
                     %Point{x: 20, y: 30}
                   ]
                 ]
               }
    end

    test "returns a Polygon with a hole and SRID" do
      wkt = """
        SRID=789;
        POLYGON (
          (35 10, 45 45, 15 40, 10 20, 35 10),
          (20 30, 35 35, 30 20, 20 30)
        )
      """

      assert Polygon.from_wkt!(wkt) ==
               {%Polygon{
                  exterior: [
                    %Point{x: 35, y: 10},
                    %Point{x: 45, y: 45},
                    %Point{x: 15, y: 40},
                    %Point{x: 10, y: 20},
                    %Point{x: 35, y: 10}
                  ],
                  interiors: [
                    [
                      %Point{x: 20, y: 30},
                      %Point{x: 35, y: 35},
                      %Point{x: 30, y: 20},
                      %Point{x: 20, y: 30}
                    ]
                  ]
                }, 789}
    end

    test "raises an error for an invalid WKT" do
      message = "expected 'SRID', 'Geometry' or 'SRID;Geometry' at 1:0, got: 'Daisy'"

      assert_raise Geometry.Error, message, fn ->
        Polygon.from_wkt!("Daisy")
      end
    end
  end
end
