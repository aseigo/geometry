defmodule Geometry.LineString do
  @moduledoc """
  A line-string struct, representing a 2D line.

  A none empty line-string requires at least two points.
  """

  # This file is auto-generated by `mix geom.gen`. The ZM version of this
  # file is using as a template.

  @behaviour Geometry

  alias Geometry.{GeoJson, LineString, Point, WKT}

  defstruct points: []

  @type t :: %LineString{points: [Point.t()]}

  @doc """
  Creates an empty `LineString`.

  ## Examples

      iex> LineString.new()
      %LineString{points: []}
  """
  @spec new :: t()
  def new, do: %LineString{}

  @doc """
  Creates a `LineString` from the given `Point`s.

  ## Examples

      iex> LineString.new([Point.new(1, 2), Point.new(3, 4)])
      %LineString{points: [
        %Point{x: 1, y: 2},
        %Point{x: 3, y: 4}
      ]}
  """
  @spec new([Point.t()]) :: t()
  def new([]), do: %LineString{}
  def new([_, _ | _] = points), do: %LineString{points: points}

  @doc """
  Returns `true` if the given `LineString` is empty.

  ## Examples

      iex> LineString.empty?(LineString.new())
      true

      iex> LineString.empty?(
      ...>   LineString.new(
      ...>     [Point.new(1, 2), Point.new(3, 4)]))
      false
  """
  @impl Geometry
  @spec empty?(t()) :: boolean
  def empty?(%LineString{} = line_string), do: Enum.empty?(line_string.points)

  @doc """
  Creates a `LineString` from the given coordinates.

  ## Examples

      iex> LineString.from_coordinates([
      ...>   [-1, 1], [-2, 2], [-3, 3]])
      %LineString{
        points: [
          %Point{x: -1, y: 1},
          %Point{x: -2, y: 2},
          %Point{x: -3, y: 3}
        ]
      }

      iex> LineString.from_coordinates(
      ...>   [{-1, 1}, {-2, 2}, {-3, 3}])
      %LineString{
        points: [
          %Point{x: -1, y: 1},
          %Point{x: -2, y: 2},
          %Point{x: -3, y: 3}
        ]
      }
  """
  @impl Geometry
  @spec from_coordinates([Geometry.coordinate()]) :: t()
  def from_coordinates(coordinates) do
    %LineString{points: Enum.map(coordinates, &Point.new/1)}
  end

  @doc """
  Returns an `:ok` tuple with the `LineString` from the given GeoJSON term.
  Otherwise returns an `:error` tuple.

  ## Examples

      iex> ~s(
      ...> {
      ...>   "type": "LineString",
      ...>   "coordinates": [
      ...>     [1.1, 1.2],
      ...>     [20.1, 20.2]
      ...>   ]
      ...> }
      ...> )
      iex> |> Jason.decode!()
      iex> |> LineString.from_geo_json()
      {:ok, %LineString{points: [
        %Point{x: 1.1, y: 1.2},
        %Point{x: 20.1, y: 20.2}
      ]}}
  """
  @impl Geometry
  @spec from_geo_json(Geometry.geo_json_term()) :: {:ok, t()} | Geometry.geo_json_error()
  def from_geo_json(json), do: GeoJson.to_line_string(json, LineString)

  @doc """
  Returns the GeoJSON term of a `LineString`.

  ## Examples

      iex> LineString.to_geo_json(
      ...>   LineString.new([
      ...>     Point.new(-1.1, -2.2),
      ...>     Point.new(1.1, 2.2)
      ...>   ]))
      %{
        "type" => "LineString",
        "coordinates" => [
          [-1.1, -2.2],
          [1.1, 2.2]
        ]
      }
  """
  @impl Geometry
  @spec to_geo_json(t()) :: Geometry.geo_json_term()
  def to_geo_json(%LineString{points: [_, _ | _] = points}) do
    %{
      "type" => "LineString",
      "coordinates" => Enum.map(points, fn point -> Point.to_list(point) end)
    }
  end

  @doc """
  Returns an `:ok` tuple with the `LineString` from the given WKT string.
  Otherwise returns an `:error` tuple.

  With the option `srid: true`, an SRID is expecting.

  ## Examples

      iex> LineString.from_wkt(
      ...>   "LineString (-5.1 7.8, 0.1 0.2)")
      {:ok, %LineString{
        points: [
          %Point{x: -5.1, y: 7.8},
          %Point{x: 0.1, y: 0.2}
        ]
      }}

      iex> LineString.from_wkt(
      ...>   "SRID=7219;LineString (-5.1 7.8, 0.1 0.2)",
      ...>   srid: true)
      {:ok, 7219, %LineString{
        points: [
          %Point{x: -5.1, y: 7.8},
          %Point{x: 0.1, y: 0.2}
        ]
      }}
  """
  @impl Geometry
  @spec from_wkt(Geometry.wkt(), keyword()) :: {:ok, t()} | Geometry.wkt_error()
  def from_wkt(wkt, opts \\ []), do: WKT.to_geometry(wkt, LineString, opts)

  @doc """
  Returns the WKT representation for a `LineString`. With option `:srid` an
  EWKT representation with the SRID is returned.

  ## Examples

      iex> LineString.to_wkt(LineString.new())
      "LineString EMPTY"

      iex> LineString.to_wkt(
      ...>   LineString.new([
      ...>     Point.new(7.1, 8.1),
      ...>     Point.new(9.2, 5.2)
      ...>   ])
      ...> )
      "LineString (7.1 8.1, 9.2 5.2)"

      iex> LineString.to_wkt(
      ...>   LineString.new([
      ...>     Point.new(7.1, 8.1),
      ...>     Point.new(9.2, 5.2)
      ...>   ]),
      ...>   srid: 123
      ...> )
      "SRID=123;LineString (7.1 8.1, 9.2 5.2)"
  """
  @impl Geometry
  @spec to_wkt(t(), keyword()) :: Geometry.wkt()
  def to_wkt(line_string, opts \\ [])

  def to_wkt(%LineString{points: []}, opts) do
    "EMPTY"
    |> to_wkt_line_string()
    |> WKT.to_ewkt(opts)
  end

  def to_wkt(%LineString{points: [_, _ | _] = points}, opts) do
    points
    |> to_wkt_points()
    |> to_wkt_line_string()
    |> WKT.to_ewkt(opts)
  end

  defp to_wkt_points(points) do
    wkt =
      points
      |> Enum.map(fn point -> Point.to_wkt_coordinate(point) end)
      |> Enum.join(", ")

    "(#{wkt})"
  end

  defp to_wkt_line_string(wkt), do: "LineString #{wkt}"
end
